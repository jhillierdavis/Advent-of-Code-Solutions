import pytest
from collections import defaultdict

import solution

@pytest.mark.parametrize(
    "cube_a, cube_b, expected",
    [
        pytest.param((0,0,0), (0,0,0), True),
        pytest.param((1,2,3), (1,2,3), True),
        pytest.param((1,0,0), (0,0,0), False),
        pytest.param((1,1,1), (0,0,0), False),
        pytest.param((1,2,3), (3,2,1), False),
    ],    
)
def test_is_same_cube(cube_a, cube_b, expected):
    assert solution.is_same_cube(cube_a, cube_b) == expected


@pytest.mark.parametrize(
    "block, expected",
    [
        pytest.param([(0,0,0), (1,0,0), (2,0,0)], True),
        pytest.param([(0,0,1), (1,0,1), (2,0,1)], True),
        pytest.param([(0,0,4), (1,0,3), (2,0,2)], False),
        pytest.param([(1,1,9), (2,1,9), (3,1,9)], False),
    ],    
)
def test_is_block_grounded(block, expected):
    assert solution.is_block_grounded(block) == expected


@pytest.mark.parametrize(
    "block_a, block_b, expected",
    [
        pytest.param([(0,0,0), (1,0,0), (2,0,0)], [(0,0,0), (0,1,0), (0,2,0)], True),
        pytest.param([(1, 0, 1), (1, 1, 1), (1, 2, 1)], [(0, 0, 1), (1, 0, 1), (2, 0, 1)], True),
        pytest.param([(0,0,0), (1,0,0), (2,0,0)], [(0,1,0), (1,1,0), (2,1,0)], False),
        pytest.param([(1, 0, 1), (1, 1, 1), (1, 2, 1)], [(0, 0, 2), (1, 0, 2), (2, 0, 2)], False),
    ],    
)
def test_has_block_intersection(block_a, block_b, expected):
    assert solution.has_block_intersection(block_a, block_b) == expected


@pytest.mark.parametrize(
    "block, expected",
    [
        pytest.param([(0,0,2), (1,0,2), (2,0,2)], [(0,0,1), (1,0,1), (2,0,1)]),
        pytest.param([(1,1,4), (1,1,3), (1,1,2)], [(1,1,3), (1,1,2), (1,1,1)]),        
    ],    
)
def test_get_block_shifted_down(block, expected):
    assert solution.get_block_shifted_down(block) == expected


@pytest.mark.parametrize(
    "filename,expected",
    [
        pytest.param("puzzle-input-example.txt", 9),
    ],    
)
def test_get_max_height_from(filename, expected):
    blocks = solution.get_blocks_from(filename)

    assert solution.get_max_block_height_from(blocks) == expected


@pytest.mark.parametrize(
    "filename,expected",
    [
        pytest.param("puzzle-input-example.txt", [[(1, 0, 1), (1, 1, 1), (1, 2, 1)],[(0, 0, 2), (1, 0, 2), (2, 0, 2)],[(0, 2, 2), (1, 2, 2), (2, 2, 2)],[(0, 0, 3), (0, 1, 3), (0, 2, 3)],[(2, 0, 3), (2, 1, 3), (2, 2, 3)],[(0, 1, 4), (1, 1, 4), (2, 1, 4)],[(1, 1, 5), (1, 1, 6)]]),
    ],    
)
def test_move_until_stable_from(filename, expected):
    assert solution.move_until_stable_from(filename) == expected


@pytest.mark.parametrize(
    "filename,expected",
    [
        pytest.param("puzzle-input-example.txt", 5),
        #pytest.param("puzzle-input-full.txt", 434), # TODO: Optimise as too slow!
    ],    
)
def test_solve_part1(filename, expected):
    assert solution.solve_part1(filename) == expected


@pytest.mark.parametrize(
    "input,expected",
    [
        pytest.param({0: {1, 2}, 1: {3, 4}, 2: {3, 4}, 3: {5}, 4: {5}, 5: {6}}, 7),
        pytest.param({0: {16, 30}, 1: {29}, 2: {27}, 3: {9}, 4: {20}, 9: {14}, 10: {25}, 12: {27, 30}, 13: {24, 28}, 14: {42}, 15: {34}, 16: {36}, 17: {23}, 19: {22, 30}, 21: {28}, 22: {33, 26}, 24: {39, 31}, 25: {44, 37}, 26: {35}, 28: {40}, 30: {36, 46}, 31: {32, 38}, 32: {58}, 34: {64}, 35: {43}, 36: {52, 54, 47}, 37: {49}, 38: {45}, 40: {48, 41}, 41: {53}, 44: {50, 59}, 46: {51}, 47: {65, 66}, 48: {53}, 49: {90}, 52: {57, 61, 55}, 53: {56}, 54: {60, 55}, 55: {69}, 56: {67, 62}, 58: {68, 63}, 60: {72}, 61: {70}, 62: {74}, 64: {71}, 65: {69}, 69: {80, 73, 76}, 70: {83, 75, 76, 77}, 72: {88, 86}, 73: {107}, 75: {78, 79}, 76: {84}, 77: {87}, 78: {81}, 80: {82, 85}, 81: {101, 102}, 82: {98}, 83: {89, 92}, 84: {91}, 85: {93}, 86: {96}, 87: {95}, 88: {94}, 89: {99}, 90: {103}, 91: {97}, 92: {99}, 95: {101, 102}, 96: {107, 100}, 98: {104, 113, 116}, 99: {105, 109}, 100: {112, 115, 108}, 101: {118}, 102: {106, 114}, 103: {120}, 104: {110}, 105: {111}, 106: {125}, 107: {118}, 108: {120}, 109: {134}, 110: {117}, 111: {122}, 113: {126}, 114: {124}, 115: {122}, 116: {121, 119}, 117: {128}, 120: {123}, 121: {133, 127}, 122: {136, 132}, 124: {129, 137}, 125: {131}, 127: {151, 130, 146}, 128: {155, 140, 135}, 129: {145, 141, 150}, 130: {153, 139, 143}, 131: {152, 138}, 132: {148}, 133: {142, 151}, 134: {144, 147}, 135: {192}, 136: {159}, 137: {149}, 140: {156}, 142: {161}, 143: {165}, 144: {157}, 146: {168, 175}, 148: {154}, 149: {160, 178}, 150: {162}, 151: {177, 174}, 152: {176, 182, 166}, 153: {169}, 154: {181}, 155: {158}, 156: {170, 163}, 157: {164}, 159: {171, 172}, 160: {167}, 161: {185}, 162: {184, 173}, 164: {180}, 165: {179}, 166: {175}, 167: {190}, 168: {223}, 170: {198}, 171: {186}, 172: {183}, 174: {188}, 178: {187}, 179: {194, 191}, 180: {196}, 181: {193}, 182: {197}, 183: {189}, 185: {202}, 186: {200, 201}, 187: {195}, 189: {214}, 190: {204}, 192: {213, 199}, 194: {209}, 195: {203}, 197: {208}, 198: {205}, 200: {217}, 201: {214}, 202: {211}, 204: {220, 207}, 205: {212, 206}, 206: {215}, 207: {224, 210, 227}, 208: {219}, 209: {228, 230, 231}, 211: {218, 229}, 212: {216}, 213: {225}, 214: {233, 238}, 215: {226}, 216: {232, 235}, 218: {240}, 219: {237, 222}, 220: {236, 221}, 221: {245}, 222: {234}, 230: {243}, 231: {264}, 232: {242, 270}, 233: {241}, 234: {260}, 236: {244}, 237: {248}, 238: {239}, 239: {250, 246}, 240: {247}, 241: {249, 251}, 242: {252}, 245: {257}, 246: {261}, 247: {253, 254}, 249: {258}, 252: {259, 262, 255}, 255: {256}, 256: {269}, 257: {263}, 259: {268}, 261: {265}, 262: {267, 271}, 263: {266}, 264: {272}, 265: {274}, 266: {275, 276}, 268: {273}, 269: {283, 277}, 270: {276}, 271: {278}, 272: {284, 279}, 273: {288, 282}, 275: {280, 295}, 276: {281, 290}, 277: {289, 292}, 278: {285}, 279: {296, 303}, 281: {298, 287}, 282: {291, 301, 286}, 283: {294}, 285: {306}, 286: {300}, 287: {304, 297}, 289: {311}, 291: {305, 309, 293}, 292: {328}, 293: {299}, 294: {302}, 298: {312, 307}, 299: {308}, 300: {310}, 301: {313, 309}, 304: {316}, 305: {331}, 306: {323, 315}, 307: {317}, 308: {314}, 309: {318}, 311: {320, 324}, 312: {319}, 313: {325}, 314: {321}, 315: {330}, 319: {327}, 320: {328, 322}, 321: {350}, 322: {333}, 323: {326}, 324: {335}, 325: {329}, 326: {337}, 329: {338}, 330: {334}, 331: {332}, 333: {343}, 334: {336, 339, 340, 342}, 336: {341}, 337: {344}, 339: {345}, 340: {346}, 341: {347}, 343: {348}, 344: {356, 349}, 345: {350, 351}, 347: {353, 358}, 350: {354}, 351: {352, 362}, 352: {361, 355, 357}, 354: {364}, 355: {363}, 356: {365}, 357: {360, 359}, 361: {370}, 363: {372}, 364: {368, 369, 367}, 365: {366}, 366: {380}, 367: {377, 373, 374, 375}, 370: {371}, 371: {378}, 372: {381}, 374: {376, 379}, 377: {384, 383}, 378: {390}, 379: {385, 390}, 380: {388, 382}, 383: {392, 391}, 385: {386, 387}, 386: {393, 389}, 387: {395, 398}, 388: {397, 398}, 389: {394}, 391: {396}, 393: {403, 399}, 394: {401}, 395: {404, 407}, 396: {402}, 398: {400, 409}, 399: {410, 405}, 400: {416}, 401: {408, 406}, 402: {414}, 404: {411, 415}, 405: {418}, 406: {412, 413}, 407: {420}, 408: {417, 419, 412}, 410: {424}, 413: {422}, 415: {431, 433, 423}, 416: {425, 421, 430}, 417: {426}, 419: {427}, 420: {428}, 421: {436}, 422: {429}, 425: {437, 439}, 426: {432, 434}, 427: {447}, 428: {440}, 429: {442}, 431: {441}, 432: {444}, 433: {435}, 434: {453}, 435: {443, 445, 438}, 436: {451}, 437: {449, 450, 457}, 438: {448, 462}, 439: {457, 450}, 440: {452, 446}, 441: {458}, 442: {455}, 443: {462, 463}, 444: {459, 454}, 445: {462}, 447: {464, 460}, 448: {470}, 450: {467}, 451: {465, 468}, 453: {456}, 456: {471}, 457: {473}, 458: {476}, 459: {466, 461}, 460: {475}, 461: {472, 479}, 462: {478}, 464: {469}, 465: {474}, 466: {479}, 467: {481, 484}, 468: {480, 474}, 469: {482, 477}, 470: {485}, 472: {486, 487}, 474: {488, 483, 495}, 477: {488}, 478: {489, 485}, 480: {491}, 482: {497, 493}, 483: {509}, 484: {499}, 485: {494}, 486: {490}, 487: {490, 498, 492}, 488: {500}, 489: {512}, 490: {502, 503}, 491: {506}, 492: {496, 508}, 493: {504, 513}, 495: {509}, 496: {505}, 497: {501}, 498: {514}, 500: {507}, 501: {516}, 502: {518, 519}, 503: {505, 523, 510}, 506: {521, 524, 511}, 507: {517}, 508: {552}, 509: {515}, 510: {537, 522}, 511: {520, 541, 533}, 512: {536, 531, 525}, 513: {530}, 514: {532}, 518: {526}, 519: {528}, 520: {535}, 521: {541, 542, 527}, 522: {534}, 523: {529}, 524: {544, 538}, 525: {566}, 529: {545}, 530: {536, 548}, 532: {539}, 533: {552, 551}, 534: {553, 540, 543}, 535: {550}, 536: {546}, 539: {549}, 542: {551}, 545: {547}, 546: {555}, 547: {556, 558, 564}, 548: {554}, 551: {557}, 552: {569}, 553: {562}, 554: {567}, 555: {580}, 556: {560, 565}, 557: {561}, 558: {563, 559}, 559: {570, 573}, 560: {570}, 561: {577, 575}, 562: {568}, 563: {573}, 566: {585, 571}, 567: {580}, 568: {576, 572}, 569: {578, 574}, 570: {579, 590}, 571: {595}, 572: {586}, 573: {590, 588, 582}, 574: {584}, 575: {589, 583}, 577: {593}, 578: {581, 591}, 579: {592, 594}, 580: {581}, 582: {596}, 584: {587}, 587: {603}, 588: {607}, 589: {602}, 590: {599}, 591: {608}, 592: {600, 597, 598}, 593: {604}, 598: {610, 605}, 599: {601}, 600: {617}, 601: {611, 606}, 602: {615}, 603: {613, 614}, 605: {609}, 607: {612}, 608: {624}, 609: {616}, 611: {619}, 612: {634, 631}, 613: {621}, 614: {622}, 615: {620, 629}, 616: {618}, 618: {627}, 619: {628}, 621: {624, 626, 635}, 622: {624, 625, 623}, 623: {632}, 625: {633, 630}, 626: {641, 636}, 627: {644, 637}, 628: {640, 643}, 630: {638}, 631: {639}, 633: {646}, 634: {642}, 636: {650}, 637: {651}, 638: {653}, 639: {645}, 640: {658, 655}, 641: {648, 649, 646}, 643: {659}, 645: {652, 654}, 646: {647}, 647: {668}, 648: {664, 661}, 650: {656, 663}, 651: {662}, 654: {657}, 656: {667}, 657: {681}, 658: {666, 660}, 660: {665}, 661: {675, 669}, 663: {667, 670}, 664: {675, 669, 671}, 665: {673, 683, 676}, 666: {672, 674, 678}, 668: {680}, 669: {677}, 670: {684}, 672: {683}, 673: {690, 682, 679}, 674: {689}, 676: {688}, 677: {685}, 678: {692}, 679: {707}, 680: {691, 687}, 682: {701}, 683: {697, 698, 686}, 684: {693}, 685: {700}, 687: {699, 694}, 688: {704}, 689: {695}, 690: {696}, 691: {699}, 693: {705}, 695: {703}, 697: {706, 717}, 698: {706, 717, 718}, 701: {702}, 703: {711}, 705: {715, 716, 719}, 706: {709, 710}, 707: {712, 708}, 708: {713, 714, 723}, 711: {722}, 712: {744}, 713: {721}, 714: {721, 725}, 715: {720}, 716: {735}, 717: {746, 739}, 718: {727}, 720: {726}, 721: {728}, 723: {724, 734}, 724: {730}, 725: {732}, 726: {733}, 727: {737, 731}, 728: {729}, 729: {741}, 730: {742}, 731: {743}, 732: {745}, 733: {738}, 734: {736, 740}, 735: {746, 739}, 736: {750}, 738: {752}, 741: {748}, 742: {747}, 743: {754}, 744: {749}, 745: {760}, 746: {758}, 747: {753, 755}, 749: {751}, 750: {756, 765}, 751: {785, 762}, 752: {770}, 753: {761}, 754: {778}, 755: {763, 759}, 756: {757}, 757: {803}, 758: {768, 764, 775}, 759: {769}, 760: {774}, 761: {766, 767}, 762: {787}, 764: {776}, 765: {771, 772}, 766: {780}, 767: {784, 777}, 768: {773, 782}, 769: {783}, 770: {779}, 772: {781}, 773: {786, 790, 791}, 774: {788}, 775: {782}, 776: {792}, 777: {796}, 778: {797}, 780: {811}, 781: {796}, 782: {786}, 783: {789}, 784: {796}, 785: {795, 787, 799}, 787: {800}, 788: {798}, 789: {793, 794}, 792: {801, 804}, 793: {808, 812}, 794: {808, 815}, 795: {823}, 796: {802, 807}, 801: {805, 806}, 802: {828, 822}, 803: {813, 814}, 804: {824}, 805: {821}, 806: {820}, 807: {809, 819}, 808: {810}, 809: {817, 830}, 810: {825}, 811: {816, 818}, 812: {829}, 814: {832}, 815: {833, 818}, 816: {827}, 818: {836}, 819: {826}, 821: {843}, 823: {841, 831}, 825: {849}, 826: {834}, 827: {835}, 828: {837}, 829: {839}, 831: {854, 838}, 833: {840}, 835: {850, 844}, 838: {861, 845}, 839: {848, 853}, 840: {842}, 841: {846}, 842: {856, 855}, 843: {857, 847}, 844: {849, 851}, 847: {858, 852}, 848: {860}, 854: {861, 862, 863}, 855: {876}, 857: {859}, 859: {864}, 860: {867}, 862: {865, 869}, 863: {868}, 864: {866, 870}, 865: {880}, 867: {875, 871}, 869: {872, 873, 878}, 870: {882}, 872: {881}, 873: {874, 879}, 874: {877}, 877: {886}, 879: {883}, 881: {884, 887}, 882: {885}, 883: {888}, 884: {890}, 885: {889}, 886: {891}, 887: {893}, 889: {892}, 890: {894}, 891: {896, 897}, 893: {899, 902, 895}, 894: {898}, 895: {905, 901}, 898: {900}, 899: {903}, 900: {904, 906}, 902: {908, 911}, 903: {909}, 905: {913, 907, 909}, 906: {910}, 907: {914, 915}, 908: {912, 913, 917}, 909: {922}, 910: {916}, 911: {918}, 912: {919}, 913: {921, 925, 926}, 914: {929, 924}, 916: {923}, 917: {920}, 920: {950}, 921: {929}, 922: {929}, 923: {928, 927}, 924: {930}, 925: {931, 932, 935}, 926: {932, 935}, 927: {934}, 929: {933}, 931: {936}, 932: {938}, 933: {940}, 934: {937, 942}, 935: {944, 945, 939}, 936: {943}, 938: {946, 941}, 939: {947}, 942: {948}, 943: {950}, 944: {955}, 945: {951}, 946: {949}, 947: {957}, 948: {953}, 949: {959}, 950: {960, 954, 956}, 951: {952}, 952: {962}, 953: {964}, 954: {966, 965, 958}, 955: {969}, 956: {961}, 957: {970}, 958: {968}, 961: {976, 963, 972}, 962: {977, 973}, 963: {979}, 964: {983, 975}, 965: {967}, 966: {971}, 967: {978, 980}, 969: {981}, 970: {984}, 971: {974}, 975: {988}, 976: {986}, 977: {987}, 978: {982}, 979: {1002}, 981: {995}, 982: {985, 990}, 984: {991}, 985: {994, 989}, 986: {993}, 987: {1003, 996}, 988: {992, 1000}, 989: {1001}, 990: {1004, 1005, 999}, 991: {998}, 993: {1006}, 994: {997}, 995: {1007}, 996: {1011}, 1001: {1012}, 1003: {1008}, 1004: {1009, 1013}, 1005: {1023}, 1006: {1010, 1015}, 1009: {1014}, 1010: {1017}, 1011: {1016}, 1012: {1022}, 1013: {1019}, 1014: {1025}, 1016: {1024}, 1017: {1018, 1020}, 1019: {1026, 1021, 1022}, 1020: {1031}, 1021: {1027, 1029}, 1023: {1028}, 1025: {1030}, 1026: {1035}, 1027: {1032}, 1028: {1033}, 1030: {1037}, 1031: {1038}, 1032: {1034}, 1033: {1040, 1036}, 1035: {1042, 1039}, 1037: {1049, 1046}, 1038: {1041}, 1039: {1048, 1044}, 1040: {1043}, 1041: {1047}, 1042: {1051}, 1043: {1045}, 1044: {1050}, 1046: {1054}, 1048: {1050, 1052, 1053}, 1050: {1057, 1059}, 1051: {1056, 1055}, 1052: {1060, 1062}, 1053: {1061, 1062}, 1054: {1063}, 1055: {1058}, 1056: {1064, 1058}, 1058: {1066}, 1059: {1067, 1071}, 1060: {1067, 1071}, 1062: {1072, 1065, 1074}, 1063: {1073}, 1064: {1068}, 1065: {1076}, 1066: {1080, 1069, 1070}, 1068: {1079}, 1069: {1095}, 1070: {1075}, 1072: {1089}, 1073: {1084}, 1074: {1081}, 1075: {1083, 1078}, 1076: {1090, 1085, 1077}, 1077: {1087}, 1078: {1088, 1086}, 1079: {1103}, 1080: {1082}, 1083: {1091, 1092}, 1084: {1093}, 1088: {1097}, 1089: {1098}, 1090: {1100, 1094}, 1091: {1096}, 1092: {1104}, 1094: {1101}, 1095: {1099}, 1096: {1109}, 1097: {1105}, 1098: {1102}, 1101: {1106}, 1102: {1107}, 1103: {1113, 1108}, 1104: {1110}, 1106: {1112}, 1108: {1114, 1111}, 1110: {1115, 1116, 1117}, 1111: {1118}, 1112: {1124}, 1113: {1126, 1119}, 1114: {1139, 1125}, 1115: {1121, 1122, 1131}, 1116: {1120, 1132}, 1117: {1121, 1123}, 1118: {1136}, 1119: {1133}, 1121: {1127}, 1122: {1129}, 1124: {1130}, 1126: {1128, 1139}, 1127: {1137, 1134}, 1128: {1136, 1142}, 1130: {1138}, 1131: {1144, 1140}, 1133: {1141, 1135}, 1134: {1143}, 1135: {1148}, 1136: {1153}, 1139: {1152}, 1140: {1149}, 1141: {1146, 1147}, 1142: {1147}, 1143: {1150}, 1144: {1145, 1151}, 1145: {1163}, 1147: {1160, 1155}, 1148: {1168, 1157}, 1149: {1158}, 1151: {1165}, 1152: {1156, 1159}, 1153: {1154, 1164}, 1154: {1173}, 1156: {1169}, 1158: {1161, 1162}, 1159: {1179}, 1160: {1170, 1171, 1166}, 1161: {1172, 1174}, 1163: {1178}, 1164: {1167}, 1169: {1176}, 1170: {1186}, 1171: {1177, 1183}, 1172: {1180, 1197}, 1174: {1185, 1175}, 1176: {1182, 1191}, 1177: {1184, 1181}, 1181: {1193}, 1182: {1195, 1187, 1189, 1199}, 1183: {1188}, 1184: {1193, 1190}, 1186: {1188, 1198}, 1187: {1203, 1196}, 1188: {1192}, 1190: {1194, 1205}, 1191: {1217}, 1192: {1207}, 1193: {1202, 1204}, 1194: {1206}, 1195: {1208}, 1196: {1207}, 1197: {1201}, 1198: {1200, 1210}, 1200: {1216, 1211}, 1202: {1209, 1214}, 1203: {1207}, 1205: {1218}, 1206: {1222}, 1207: {1223}, 1208: {1219, 1212}, 1210: {1213}, 1211: {1215}, 1212: {1220}, 1214: {1224, 1229}, 1215: {1232, 1225}, 1217: {1228, 1230}, 1218: {1221, 1231}, 1219: {1227}, 1222: {1226, 1237}, 1223: {1228}, 1225: {1234, 1245, 1239}, 1226: {1233, 1243}, 1228: {1240, 1241, 1235}, 1229: {1244}, 1230: {1236, 1238}, 1231: {1246}, 1235: {1249, 1251}, 1236: {1248, 1252}, 1237: {1267}, 1238: {1242, 1247}, 1239: {1252, 1253}, 1240: {1254}, 1243: {1256, 1258}, 1247: {1257, 1250}, 1249: {1260}, 1251: {1259}, 1252: {1255}, 1253: {1262}, 1254: {1263}, 1255: {1261}, 1256: {1270}, 1257: {1267, 1269}, 1258: {1265, 1270}, 1262: {1264}, 1263: {1281}, 1264: {1266, 1268}, 1265: {1274}, 1266: {1276, 1271}, 1268: {1272}, 1270: {1279}, 1271: {1273, 1275, 1278}, 1275: {1280, 1277}, 1278: {1280}, 1279: {1283}, 1280: {1282, 1284, 1285}, 1281: {1286}, 1283: {1284}, 1284: {1287}}, 61209),
    ]
)
def test_calculate_falls_for_block_disintegrations(input, expected):
    support_map = defaultdict(set)
    for k in input:
        support_map[k] = input[k]
    #print(f"DEBUG: support_map={support_map}")

    assert solution.calculate_falls_for_block_disintegrations(support_map) == expected    


@pytest.mark.parametrize(
    "filename,expected",
    [
        pytest.param("puzzle-input-example.txt", 7),
        #pytest.param("puzzle-input-full.txt", 61209), # TODO: Optimise as too slow!
    ],    
)
def test_solve_part2(filename, expected):
    assert solution.solve_part2(filename) == expected